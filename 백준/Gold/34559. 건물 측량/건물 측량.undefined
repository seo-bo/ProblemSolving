#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int>pii;

int main(void)
{
	cin.tie(0)->sync_with_stdio(0);
	int n = 0, m = 0;
	cin >> n >> m;
	vector<vector<int>>v(n + 3, vector<int>(m + 3, 0));
	vector<vector<int>>prefix(n + 3, vector<int>(m + 3, 0));
	for (int i = 1; i <= n; ++i)
	{
		string str;
		cin >> str;
		for (int j = 1; j <= m; ++j)
		{
			v[i][j] = int(str[j - 1] - '0');
		}
	}
	vector<vector<int>>dir = { {-1,0},{1,0},{0,-1},{0,1} };
	auto bfs = [&](int sx, int sy)
		{
			queue<pii>q;
			q.push(make_pair(sx, sy));
			prefix[sx][sy] = 1;
			while (!q.empty())
			{
				auto [x, y] = q.front();
				q.pop();
				for (int i = 0; i < 4; ++i)
				{
					int nx = x + dir[i][0];
					int ny = y + dir[i][1];
					if (nx >= 1 && nx <= n && ny >= 1 && ny <= m && !prefix[nx][ny] && !v[nx][ny])
					{
						q.push(make_pair(nx, ny));
						prefix[nx][ny] = 1;
					}
				}
			}
		};
	for (int i = 1; i <= n; ++i)
	{
		for (int j = 1; j <= m; ++j)
		{
			if (i == 1 || i == n || j == 1 || j == m)
			{
				if (!v[i][j] && !prefix[i][j])
				{
					bfs(i, j);
				}
			}
		}
	}
	for (int i = 1; i <= n; ++i)
	{
		for (int j = 1; j <= m; ++j)
		{
			prefix[i][j] = prefix[i - 1][j] + prefix[i][j - 1] - prefix[i - 1][j - 1] + prefix[i][j];
		}
	}
	auto query = [&](int sx, int sy, int ex, int ey)
		{
			return prefix[ex][ey] - prefix[sx - 1][ey] - prefix[ex][sy - 1] + prefix[sx - 1][sy - 1];
		};
	int q = 0;
	cin >> q;
	while (q--)
	{
		int a = 0, b = 0, c = 0, d = 0;
		cin >> a >> b >> c >> d;
		int pivot = query(a, b, c, d);
		int res = (c - a + 1) * (d - b + 1);
		if (pivot == res)
		{
			cout << "Yes\n";
		}
		else
		{
			cout << "No " << res - pivot << '\n';
		}
	}
	return 0;
}