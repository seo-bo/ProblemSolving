#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef tuple<int, int, int>tp;

int main(void)
{
	cin.tie(0)->sync_with_stdio(0);
	int n = 0, m = 0, T = 0;
	cin >> n >> m >> T;
	vector<int>parent(n + 1, 0), rank(n + 1, 0);
	iota(parent.begin(), parent.end(), 0);
	function<int(int)> find = [&](int root)
		{
			return (parent[root] == root) ? parent[root] : parent[root] = find(parent[root]);
		};
	auto merge = [&](int a, int b)
		{
			int r1 = find(a), r2 = find(b);
			if (rank[r1] > rank[r2])
			{
				parent[r2] = r1;
			}
			else
			{
				parent[r1] = r2;
				rank[r2] += (rank[r1] == rank[r2]);
			}
		};
	vector<tp>edge(m);
	for (auto& [a, b, c] : edge)
	{
		cin >> b >> c >> a;
	}
	sort(edge.begin(), edge.end());
	edge.push_back(make_tuple(T + 1, 0, 0));
	ll ans = 0, comp = n, now = 1;
	for (auto& [time, a, b] : edge)
	{
		ans += comp * (time - now);
		if (find(a) != find(b))
		{
			merge(a, b);
			comp--;
		}
		now = time;
	}
	cout << ans;
	return 0;
}