#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int main(void)
{
	cin.tie(0)->sync_with_stdio(0);
	int n = 0, m = 0;
	cin >> n >> m;
	vector<vector<int>>graph(n + 1);
	for (int i = 0; i < m; ++i)
	{
		int a = 0, b = 0;
		cin >> a >> b;
		graph[a].push_back(b);
		graph[b].push_back(a);
	}
	auto bfs = [&](int start)
		{
			vector<int>visited(n + 1, INT_MAX);
			visited[start] = 0;
			queue<int>q;
			q.push(start);
			while (!q.empty())
			{
				int cur = q.front();
				q.pop();
				for (auto& i : graph[cur])
				{
					if (visited[i] > visited[cur] + 1)
					{
						visited[i] = visited[cur] + 1;
						q.push(i);
					}
				}
			}
			return visited;
		};
	vector<int>rev = bfs(n), dist = bfs(1);
	int pivot = dist[n];
	vector<vector<int>>ok(pivot + 1);
	for (int i = 1; i <= n; ++i)
	{
		if (rev[i] + dist[i] == pivot)
		{
			ok[dist[i]].push_back(i);
		}
	}
	for (int i = 1; i <= pivot - 1; ++i)
	{
		if (ok[i].size() == 1)
		{
			cout << ok[i].front();
			return 0;
		}
	}
	cout << 1;
	return 0;
}