#include <bits/stdc++.h>
using namespace std;
typedef long long ll;

int main(void)
{
	cin.tie(0)->sync_with_stdio(0);
	int n = 0;
	cin >> n;
	vector<string>name(n);
	vector<vector<int>>stat(n, vector<int>(3, 0));
	for (int i = 0; i < n; ++i)
	{
		cin >> name[i];
		for (int j = 0; j < 3; ++j)
		{
			cin >> stat[i][j];
		}
	}
	vector<vector<int>>graph(n);
	vector<int>degree(n);
	for (int i = 0; i < n; ++i)
	{
		for (int j = i + 1; j < n; ++j)
		{
			int a = 0, b = 0;
			for (int k = 0; k < 3; ++k)
			{
				if (stat[i][k] > stat[j][k])
				{
					a++;
				}
				else if (stat[i][k] < stat[j][k])
				{
					b++;
				}
			}
			if (a > b)
			{
				graph[i].push_back(j);
				degree[j]++;
			}
			else if (a < b)
			{
				graph[j].push_back(i);
				degree[i]++;
			}
		}
	}
	int p = n;
	vector<int>ans;
	queue<int>q;
	for (int i = 0; i < n; ++i)
	{
		if (!degree[i])
		{
			q.push(i);
			ans.push_back(i);
			p--;
		}
	}
	while (!q.empty())
	{
		int cur = q.front();
		q.pop();
		for (auto& i : graph[cur])
		{
			if (--degree[i] == 0)
			{
				p--;
				q.push(i);
			}
		}
	}
	if (p)
	{
		cout << "Paradoxe Absurdo";
		return 0;
	}
	sort(ans.begin(), ans.end(), [&](const int& a, const int& b)
		{
			return name[a] < name[b];
		});
	for (auto& i : ans)
	{
		cout << name[i] << '\n';
	}
	return 0;
}