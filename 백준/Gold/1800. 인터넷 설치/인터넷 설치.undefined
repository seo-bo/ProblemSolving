#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef pair<int, int> pii;
typedef tuple<int, int, int>tp;

int main(void)
{
	cin.tie(0)->sync_with_stdio(0);
	int n = 0, m = 0, k = 0;
	cin >> n >> m >> k;
	vector<vector<pii>>graph(n + 1);
	for (int i = 0; i < m; ++i)
	{
		int a = 0, b = 0, c = 0;
		cin >> a >> b >> c;
		graph[a].push_back(make_pair(b, c));
		graph[b].push_back(make_pair(a, c));
	}
	auto dijkstra = [&](int mid)
		{
			vector<int>dist(n + 1, INT_MAX);
			dist[1] = 0;
			priority_queue<pii>pq;
			pq.push(make_pair(0, 1));
			while (!pq.empty())
			{
				auto [co, ver] = pq.top();
				pq.pop();
				if (dist[ver] < co)
				{
					continue;
				}
				for (auto& [nv, nc] : graph[ver])
				{
					int cost = (nc > mid);
					if (dist[nv] > dist[ver] + cost)
					{
						dist[nv] = dist[ver] + cost;
						pq.push(make_pair(dist[nv], nv));
					}
				}
			}
			return(dist[n] <= k);
		};
	int left = 0, right = INT_MAX / 6, ans = -1;
	while (left <= right)
	{
		int mid = (left + right) / 2;
		if (dijkstra(mid))
		{
			ans = mid;
			right = mid - 1;
		}
		else
		{
			left = mid + 1;
		}
	}
	cout << ans;
	return 0;
}