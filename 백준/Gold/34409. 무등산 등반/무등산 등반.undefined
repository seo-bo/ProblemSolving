#include<bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef tuple<ll, ll, ll>tp;

int main(void)
{
	cin.tie(0)->sync_with_stdio(0);
	ll n = 0, m = 0, maxi = 0;
	cin >> n >> m;
	vector<vector<ll>>dir = { {-1,0},{1,0},{0,-1},{0,1} };
	vector<vector<ll>>v(n, vector<ll>(m));
	vector<vector<ll>>visited(n, vector<ll>(m, LLONG_MAX));
	ll px = 0, py = 0, a = 0, b = 0, c = 0;
	cin >> px >> py >> a >> b >> c;
	px--;
	py--;
	priority_queue<tp, vector<tp>, greater<tp>>pq;
	pq.push(make_tuple(0, px, py));
	visited[px][py] = 0;
	for (auto& i : v)
	{
		for (auto& j : i)
		{
			cin >> j;
			maxi = max(maxi, j);
		}
	}
	while (!pq.empty())
	{
		auto [cost, x, y] = pq.top();
		pq.pop();
		if (visited[x][y] < cost)
		{
			continue;
		}
		for (ll i = 0; i < 4; ++i)
		{
			ll nx = x + dir[i][0];
			ll ny = y + dir[i][1];
			if (nx >= 0 && nx < n && ny >= 0 && ny < m && abs(v[nx][ny] - v[x][y]) <= c)
			{
				ll diff = v[nx][ny] - v[x][y];
				ll cost = 1;
				if (diff > 0)
				{
					cost = a * diff;
				}
				else if (diff < 0)
				{
					cost = b * -diff;
				}
				if (visited[nx][ny] > visited[x][y] + cost)
				{
					visited[nx][ny] = visited[x][y] + cost;
					pq.push(make_tuple(visited[nx][ny], nx, ny));
				}
			}
		}
	}
	ll ans = LLONG_MAX;
	for (ll i = 0; i < n; ++i)
	{
		for (ll j = 0; j < m; ++j)
		{
			if (maxi == v[i][j])
			{
				ans = min(ans, visited[i][j]);
			}
		}
	}
	cout << ((ans == LLONG_MAX) ? -1 : ans);
	return 0;
}